#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# C·∫•u h√¨nh Telegram
BOT_API_KEY="xxxxxxxx:xxxxxxxxxxxxxxxxxxxx"
CHAT_ID="xxxxxxxxxxx"

# C·∫•u h√¨nh Restic Primary Backup
# N√™n d√πng cloud object storage d·∫°ng Amazon S3, Cloudflare R2
export RESTIC_REPOSITORY="rclone:google-drive-api:bibica-net"
export RESTIC_PASSWORD="your-secure-password"	# ƒë·ªïi th√†nh 1 password t√πy th√≠ch

# Th∆∞ m·ª•c v√† file c·∫ßn sao l∆∞u
# M·ªói th∆∞ m·ª•c ho·∫∑c file c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng
BACKUP_DIR="/home /var/spool/cron/crontabs/root"

# Ch√≠nh s√°ch gi·ªØ backup
# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh t·ªëi ƒëa gi·ªØ l·∫°i 67 b·∫£n
KEEP_HOURLY=24	# gi·ªØ l·∫°i¬†24 b·∫£n snapshot (1 b·∫£n m·ªói gi·ªù trong 24 gi·ªù g·∫ßn nh·∫•t)
KEEP_DAILY=31	# gi·ªØ l·∫°i¬†31 b·∫£n snapshot (1 b·∫£n m·ªói ng√†y trong 31 ng√†y g·∫ßn nh·∫•t)
KEEP_MONTHLY=12	# gi·ªØ l·∫°i 12 b·∫£n snapshot¬†(1 b·∫£n m·ªói th√°ng trong 12 th√°ng g·∫ßn nh·∫•t)

# Ch√≠nh s√°ch ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu
# Mu·ªën ch·∫°y ki·ªÉm tra l√∫c 3h chi·ªÅu th√¨ s·ª≠a VERIFY_HOUR=15
VERIFY_HOUR=4	# M·∫∑c ƒë·ªãnh l√∫c 4h s√°ng m·ªói ng√†y

# C·∫•u h√¨nh Secondary Backup 
# M·∫∑c ƒë·ªãnh ƒë·ªÉ tr·ªëng: kh√¥ng d√πng cloud d·ª± ph√≤ng
# C√°c cloud th√™m v√†o theo c√∫ ph√°p c·ªßa rclone, c√°c cloud c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng
# V√≠ d·ª•: SECONDARY_REMOTE="cloudflare-free:bibica-net cloudflare-r2:bibica-net google-drive-api:bibica-net"
SECONDARY_REMOTE=""

# C·∫•u h√¨nh Rclone
export RCLONE_TRANSFERS=32
export RCLONE_CHECKERS=32

# Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n
full_path=$(readlink -f "$0")
[ -z "$full_path" ] && { echo "[L·ªói] Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n script"; exit 1; }
SCRIPT_DIR=$(dirname "$full_path")
VERIFY_LAST_FILE="$SCRIPT_DIR/restic_last_verify"
LOCKFILE="$SCRIPT_DIR/restic_backup.lock"
LOG_FILE="$SCRIPT_DIR/backup.log"
touch "$LOG_FILE"

log() { 
   local message="$1"
   echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" >> "$LOG_FILE"
   echo "$message"
   if [ $(wc -c < "$LOG_FILE") -gt 1048576 ]; then
       grep "\[L·ªói\]" "$LOG_FILE" | tail -n 10 > "$LOG_FILE.tmp"
       mv "$LOG_FILE.tmp" "$LOG_FILE"
   fi
}

notify_error() {
    log "[L·ªói] $1 - Chi ti·∫øt: $2"
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" -d "chat_id=$CHAT_ID" -d "parse_mode=HTML" \
         -d "text=$(printf "‚ùå [L·ªói] %s\nüîç Chi ti·∫øt:\n<code>%s</code>\nüñ•Ô∏è Th√¥ng tin h·ªá th·ªëng:\n- M√°y ch·ªß: %s\n- H·ªá ƒëi·ªÅu h√†nh: %s" "$1" "$2" "$(hostname)" "$(uname -a)")" \
         || log "[L·ªói] Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn Telegram"
}

# Export c√°c h√†m v√† bi·∫øn cho xargs
export -f log notify_error
export BOT_API_KEY CHAT_ID LOG_FILE

# Ki·ªÉm tra y√™u c·∫ßu
for cmd in restic rclone xargs; do command -v $cmd >/dev/null || { notify_error "Kh√¥ng t√¨m th·∫•y l·ªánh $cmd" "$cmd"; exit 1; }; done
for path in $BACKUP_DIR; do [ -e "$path" ] || { notify_error "ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i" "$path"; exit 1; }; done

# Thi·∫øt l·∫≠p kh√≥a v√† t·ªëi ∆∞u ti·∫øn tr√¨nh
exec 200>"$LOCKFILE" && flock -n 200 || { log "[L·ªói] M·ªôt ti·∫øn tr√¨nh Restic Multi-Cloud Backup Manager kh√°c ƒëang ch·∫°y"; exit 1; }
trap 'exec 200>&-; rm -f "$LOCKFILE"' EXIT

renice -n 19 -p $$ >/dev/null 2>&1 && ionice -c 2 -n 7 -p $$ >/dev/null 2>&1

# H√†m t·∫°o alias t·ª± ƒë·ªông
setup_alias() {
    local shell_rc_file
    local alias_restore="alias restore='$full_path restore'"
    local alias_backup="alias backup='$full_path'"

    # X√°c ƒë·ªãnh file c·∫•u h√¨nh shell d·ª±a tr√™n shell hi·ªán t·∫°i
    if [[ "$SHELL" == *"zsh"* ]]; then
        shell_rc_file="$HOME/.zshrc"
    else
        shell_rc_file="$HOME/.bashrc"
    fi

    # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t alias 'restore'
    if grep -q "alias restore=" "$shell_rc_file"; then
        current_alias_restore=$(grep "alias restore=" "$shell_rc_file" | cut -d "'" -f 2 | cut -d " " -f 1)
        if [[ "$current_alias_restore" != "$full_path" ]]; then
            sed -i.bak "s|alias restore=.*|alias restore='$full_path restore'|" "$shell_rc_file"
            echo "ƒê√£ c·∫≠p nh·∫≠t alias 'restore' ƒë·ªÉ tr·ªè ƒë·∫øn file script m·ªõi: $full_path."
        else
            echo "Alias 'restore' ƒë√£ t·ªìn t·∫°i v√† tr·ªè ƒë·∫øn file script hi·ªán t·∫°i: $full_path."
        fi
    else
        echo "$alias_restore" >> "$shell_rc_file"
        echo "ƒê√£ th√™m alias 'restore' v√†o $shell_rc_file."
    fi

    # Ki·ªÉm tra v√† c·∫≠p nh·∫≠t alias 'backup'
    if grep -q "alias backup=" "$shell_rc_file"; then
        current_alias_backup=$(grep "alias backup=" "$shell_rc_file" | cut -d "'" -f 2)
        if [[ "$current_alias_backup" != "$full_path" ]]; then
            sed -i.bak "s|alias backup=.*|alias backup='$full_path'|" "$shell_rc_file"
            echo "ƒê√£ c·∫≠p nh·∫≠t alias 'backup' ƒë·ªÉ tr·ªè ƒë·∫øn file script m·ªõi: $full_path."
        else
            echo "Alias 'backup' ƒë√£ t·ªìn t·∫°i v√† tr·ªè ƒë·∫øn file script hi·ªán t·∫°i: $full_path."
        fi
    else
        echo "$alias_backup" >> "$shell_rc_file"
        echo "ƒê√£ th√™m alias 'backup' v√†o $shell_rc_file."
    fi

    echo "ƒê·ªÉ √°p d·ª•ng thay ƒë·ªïi, ch·∫°y l·ªánh: source $shell_rc_file"
}

# Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
if [[ "$1" == "install" ]]; then
    setup_alias
    exit 0
fi

# H√†m ph·ª•c h·ªìi
restore_menu() {
    # L·∫•y gi√° tr·ªã t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    PRIMARY_REPO="$RESTIC_REPOSITORY"
    SECONDARY_REPOS=($SECONDARY_REMOTE)

    # Lo·∫°i b·ªè ti·ªÅn t·ªë "rclone:" n·∫øu c√≥
    if [[ "$PRIMARY_REPO" =~ ^rclone: ]]; then
        PRIMARY_REPO_DISPLAY="${PRIMARY_REPO#rclone:}"
    else
        PRIMARY_REPO_DISPLAY="$PRIMARY_REPO"
    fi
	echo
    echo "=== CH·ªåN KHO L∆ØU TR·ªÆ ƒê·ªÇ PH·ª§C H·ªíI ==="
    echo "1) Sao l∆∞u ch√≠nh - $PRIMARY_REPO_DISPLAY"
    
    # Hi·ªÉn th·ªã c√°c kho l∆∞u tr·ªØ d·ª± ph√≤ng
    for ((i=0; i<${#SECONDARY_REPOS[@]}; i++)); do
        echo "$((i+2))) Sao l∆∞u d·ª± ph√≤ng - ${SECONDARY_REPOS[$i]}"
    done

    echo "0) Tho√°t"
	echo	
    read -p "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: " choice

	case $choice in
		1)
			# Ki·ªÉm tra xem PRIMARY_REPO ƒë√£ c√≥ "rclone:" ch∆∞a
			if [[ ! "$PRIMARY_REPO" =~ ^rclone: ]]; then
				export RESTIC_REPOSITORY="rclone:$PRIMARY_REPO"
			else
				export RESTIC_REPOSITORY="$PRIMARY_REPO"
			fi
			;;
		0)
			echo "Tho√°t Restic Multi-Cloud Backup Manager."
			echo
			exit 0
			;;
		*)
			if [[ $choice -ge 2 ]]; then  # X·ª≠ l√Ω c√°c l·ª±a ch·ªçn t·ª´ 2 tr·ªü l√™n
				# T√≠nh to√°n ch·ªâ s·ªë c·ªßa kho l∆∞u tr·ªØ d·ª± ph√≤ng d·ª±a tr√™n l·ª±a ch·ªçn
				index=$((choice - 2))  # L·ª±a ch·ªçn 2 t∆∞∆°ng ·ª©ng v·ªõi SECONDARY_REPOS[0], 3 t∆∞∆°ng ·ª©ng v·ªõi SECONDARY_REPOS[1], ...
				
				# Ki·ªÉm tra xem ch·ªâ s·ªë c√≥ h·ª£p l·ªá kh√¥ng
				if [ $index -ge 0 ] && [ $index -lt ${#SECONDARY_REPOS[@]} ]; then
					# Ki·ªÉm tra xem kho l∆∞u tr·ªØ ƒë√£ c√≥ "rclone:" ch∆∞a
					if [[ ! "${SECONDARY_REPOS[$index]}" =~ ^rclone: ]]; then
						export RESTIC_REPOSITORY="rclone:${SECONDARY_REPOS[$index]}"
					else
						export RESTIC_REPOSITORY="${SECONDARY_REPOS[$index]}"
					fi
				else
					echo "Kh√¥ng c√≥ kho l∆∞u tr·ªØ d·ª± ph√≤ng t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn n√†y."
					restore_menu
					return
				fi
			else
				echo "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
				restore_menu
				return
			fi
			;;
	esac

	# Ki·ªÉm tra xem kho l∆∞u tr·ªØ c√≥ h·ª£p l·ªá kh√¥ng
	if ! restic snapshots -r "$RESTIC_REPOSITORY" > /dev/null 2>&1; then
		echo "‚ùå L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn kho l∆∞u tr·ªØ $RESTIC_REPOSITORY."
		echo "Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh ho·∫∑c ch·ªçn kho l∆∞u tr·ªØ kh√°c."
		echo
		restore_menu
		return
	fi

	# N·∫øu kho l∆∞u tr·ªØ h·ª£p l·ªá, ti·∫øp t·ª•c hi·ªÉn th·ªã danh s√°ch snapshots
	echo	
	echo "ƒê√£ ch·ªçn kho l∆∞u tr·ªØ: $RESTIC_REPOSITORY"
	echo "=== DANH S√ÅCH C√ÅC B·∫¢N SAO L∆ØU ==="
	restic snapshots -r "$RESTIC_REPOSITORY"
	echo
	
    while true; do
        read -p "üìã Nh·∫≠p ID b·∫£n sao l∆∞u ƒë·ªÉ ph·ª•c h·ªìi (ho·∫∑c 'back' ƒë·ªÉ quay l·∫°i): " snapshot_id

        if [ "$snapshot_id" == "back" ]; then
            restore_menu
            return
        fi

        # Ki·ªÉm tra ID snapshot
        if [[ ! "$snapshot_id" =~ ^[a-f0-9]{8}$ ]]; then
			echo
            echo "‚ùå ID kh√¥ng h·ª£p l·ªá. ID ph·∫£i l√† chu·ªói hex d√†i 8 k√Ω t·ª± (v√≠ d·ª•: 96701d8b)."
			echo
            continue
        fi

        # Ki·ªÉm tra xem ID c√≥ t·ªìn t·∫°i trong kho l∆∞u tr·ªØ kh√¥ng
		if ! restic snapshots -r "$RESTIC_REPOSITORY" | grep -q -w "$snapshot_id"; then
			echo
			echo "‚ùå ID kh√¥ng t·ªìn t·∫°i trong kho l∆∞u tr·ªØ."
			echo
			continue
		fi

        break
    done

	echo
    echo "=== T√ôY CH·ªåN PH·ª§C H·ªíI ==="
    echo "1) Ph·ª•c h·ªìi to√†n b·ªô b·∫£n sao l∆∞u"
    echo "2) Ph·ª•c h·ªìi m·ªôt ph·∫ßn (th∆∞ m·ª•c/t·∫≠p tin c·ª• th·ªÉ)"
    echo "0) Quay l·∫°i"
    read -p "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: " restore_choice

    case $restore_choice in
        1)
            while true; do
				echo "üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o)."
				echo "   V√≠ d·ª•: /home/user (d·ªØ li·ªáu tr√™n cloud storage s·∫Ω gi·∫£i n√©n v√†o /home/user): "
				echo "   V√≠ d·ª•: / (d·ªØ li·ªáu tr√™n cloud storage s·∫Ω t·ª± ƒë·ªông gi·∫£i n√©n v√†o ƒë∆∞·ªùng d·∫´n nh∆∞ ban ƒë·∫ßu): "
				read -p "> " restore_path
                if [ -z "$restore_path" ]; then
                    restore_path="/"
                fi

                # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ph·ª•c h·ªìi
                if [[ ! "$restore_path" =~ ^/ ]]; then
					echo
                    echo "‚ùå ƒê∆∞·ªùng d·∫´n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / V√≠ d·ª•: /home/user"
					echo
                    continue
                fi

                break
            done

			echo
			echo "=== X√ÅC NH·∫¨N PH·ª§C H·ªíI ==="
			echo -e "üì¶ Kho l∆∞u tr·ªØ: \e[32m$RESTIC_REPOSITORY\e[0m"
			echo -e "üìã ID b·∫£n sao l∆∞u: \e[34m$snapshot_id\e[0m"
			echo -e "üìÇ ƒê∆∞·ªùng d·∫´n ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o): \e[33m$restore_path\e[0m"
            read -p "‚ö†Ô∏è X√°c nh·∫≠n ph·ª•c h·ªìi? (yes/no): " confirm

            if [ "$confirm" == "yes" ]; then
                restic restore -r "$RESTIC_REPOSITORY" "$snapshot_id" --target "$restore_path"
            else
                restore_menu
            fi
            ;;
        2)
            while true; do
				echo "üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o)."
				echo "   V√≠ d·ª•: /home/user (d·ªØ li·ªáu tr√™n cloud storage s·∫Ω gi·∫£i n√©n v√†o /home/user): "
				echo "   V√≠ d·ª•: / (d·ªØ li·ªáu tr√™n cloud storage s·∫Ω t·ª± ƒë·ªông gi·∫£i n√©n v√†o ƒë∆∞·ªùng d·∫´n nh∆∞ ban ƒë·∫ßu): "
				read -p "> " restore_path
                if [ -z "$restore_path" ]; then
                    restore_path="/"
                fi

                # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n ph·ª•c h·ªìi
                if [[ ! "$restore_path" =~ ^/ ]]; then
					echo
                    echo "‚ùå ƒê∆∞·ªùng d·∫´n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / V√≠ d·ª•: /home/user"
					echo
                    continue
                fi

                break
            done

            while true; do
				echo "üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin trong b·∫£n sao l∆∞u mu·ªën ph·ª•c h·ªìi."
				echo "   V√≠ d·ª•: /home/backup (ph·ª•c h·ªìi th∆∞ m·ª•c /home/backup t·ª´ b·∫£n sao l∆∞u): "
				read -p "> " restore_item

                # Ki·ªÉm tra ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin
                if [[ ! "$restore_item" =~ ^/ ]]; then
					echo
                    echo "‚ùå ƒê∆∞·ªùng d·∫´n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / V√≠ d·ª•: /home/backup"
					echo
                    continue
                fi

                break
            done
			
			echo
			echo "=== X√ÅC NH·∫¨N PH·ª§C H·ªíI ==="
			echo -e "üì¶ Kho l∆∞u tr·ªØ: \e[32m$RESTIC_REPOSITORY\e[0m"
			echo -e "üìã ID b·∫£n sao l∆∞u: \e[34m$snapshot_id\e[0m"
			echo -e "üìÇ ƒê∆∞·ªùng d·∫´n ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o): \e[33m$restore_path\e[0m"
			echo -e "üìÇ ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin trong b·∫£n sao l∆∞u mu·ªën ph·ª•c h·ªìi: \e[31m$restore_item\e[0m"
			read -p "‚ö†Ô∏è X√°c nh·∫≠n ph·ª•c h·ªìi? (yes/no): " confirm

            if [ "$confirm" == "yes" ]; then
                restic restore -r "$RESTIC_REPOSITORY" "$snapshot_id:$restore_item" --target "$restore_path"
            else
                restore_menu
            fi
            ;;
        0)
            restore_menu
            ;;
        *)
            echo "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
            restore_menu
            ;;
    esac
}

# Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
if [ "$1" == "restore" ]; then
    restore_menu
    exit 0
fi

# Backup ch√≠nh
source_path=${RESTIC_REPOSITORY#rclone:}
log "B·∫Øt ƒë·∫ßu backup - $source_path"
if ! error_output=$(restic backup $BACKUP_DIR 2>&1); then
    if echo "$error_output" | grep -q "unable to open config file"; then
        log "Repository ch∆∞a t·ªìn t·∫°i, ƒëang kh·ªüi t·∫°o..."
        if ! init_output=$(restic init 2>&1); then
            notify_error "Kh√¥ng th·ªÉ kh·ªüi t·∫°o repository" "$init_output"; exit 1
        fi
        log "Kh·ªüi t·∫°o repository th√†nh c√¥ng, th·ª±c hi·ªán l·∫°i backup..."
        if ! error_output=$(restic backup $BACKUP_DIR 2>&1); then
            notify_error "Backup th·∫•t b·∫°i sau khi kh·ªüi t·∫°o" "$error_output"; exit 1
        fi
    else 
        notify_error "Backup th·∫•t b·∫°i" "$error_output"; exit 1
    fi
fi
log "Backup th√†nh c√¥ng"

# D·ªçn d·∫πp v√† ki·ªÉm tra
log "B·∫Øt ƒë·∫ßu d·ªçn d·∫πp backup c≈©"
if ! error_output=$(restic forget --prune --keep-hourly $KEEP_HOURLY --keep-daily $KEEP_DAILY --keep-monthly $KEEP_MONTHLY 2>&1); then
    notify_error "Kh√¥ng th·ªÉ d·ªçn d·∫πp backup c≈©" "$error_output"
else
    log "D·ªçn d·∫πp backup c≈© th√†nh c√¥ng"
fi

if [ ! -f "$VERIFY_LAST_FILE" ] || [ $(date +%Y-%m-%d) != $(cat "$VERIFY_LAST_FILE") ] && [ $(date +%H) -ge "$VERIFY_HOUR" ]; then
    log "B·∫Øt ƒë·∫ßu ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu"
    if ! error_output=$(restic check --read-data 2>&1); then
        notify_error "Ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu th·∫•t b·∫°i" "$error_output"
    else
        date +%Y-%m-%d > "$VERIFY_LAST_FILE"
        log "Ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu th√†nh c√¥ng"
    fi
fi

# Sao l∆∞u d·ª± ph√≤ng
[ -n "$SECONDARY_REMOTE" ] && {
    log "B·∫Øt ƒë·∫ßu sao l∆∞u d·ª± ph√≤ng"
    do_backup() {
        local target="$1"
        if ! error_output=$(rclone sync "$2" "$target" 2>&1); then
            log "[L·ªói] Sao l∆∞u d·ª± ph√≤ng th·∫•t b·∫°i - $target"
            notify_error "Sao l∆∞u d·ª± ph√≤ng th·∫•t b·∫°i - $target" "$error_output"
            return 1
        fi
        log "Sao l∆∞u d·ª± ph√≤ng th√†nh c√¥ng - $target"
        return 0
    }
    export -f do_backup
    
    if [ $(echo "$SECONDARY_REMOTE" | wc -w) -eq 1 ]; then
        log "C√≥ 1 remote ƒë∆∞·ª£c c·∫•u h√¨nh"
        do_backup "$SECONDARY_REMOTE" "$source_path"
    else
        log "C√≥ nhi·ªÅu remote ƒë∆∞·ª£c c·∫•u h√¨nh, ch·∫°y song song"
        echo "$SECONDARY_REMOTE" | tr ' ' '\n' | xargs -P 4 -I {} bash -c "do_backup '{}' '$source_path'" && \
            log "Ho√†n th√†nh t·∫•t c·∫£ sao l∆∞u d·ª± ph√≤ng" || log "[L·ªói] C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh sao l∆∞u d·ª± ph√≤ng song song"
    fi
}

log "Ho√†n t·∫•t quy tr√¨nh backup"
