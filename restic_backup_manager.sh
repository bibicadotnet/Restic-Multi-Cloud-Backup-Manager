#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# C·∫•u h√¨nh Telegram
BOT_API_KEY="xxxxxxxx:xxxxxxxxxxxxx"
CHAT_ID="xxxxxxxxx"

# C·∫•u h√¨nh Restic Primary Backup
export RESTIC_REPOSITORY="rclone:cloudflare-free:restic-backup/bibica-net"
export RESTIC_PASSWORD="your-secure-password"

# C·∫•u h√¨nh Secondary Backup 
# M·∫∑c ƒë·ªãnh ƒë·ªÉ tr·ªëng l√† b·ªè qua kh√¥ng d√πng th√™m cloud d·ª± ph√≤ng
# D√πng th√™m nhi·ªÅu cloud th√¨ c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng (d√πng theo c√∫ ph√°p c·ªßa rclone)
# V√≠ d·ª•: google-drive-api:restic-backup/bibica-net cloudflare-r2:bibica-net
SECONDARY_REMOTE=""  

# Th∆∞ m·ª•c v√† file c·∫ßn backup
# M·ªói th∆∞ m·ª•c ho·∫∑c file c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng
BACKUP_DIR="/home /var/spool/cron/crontabs/root"

# Ch√≠nh s√°ch gi·ªØ backup
KEEP_HOURLY=24
KEEP_DAILY=31
KEEP_MONTHLY=1

# Ch√≠nh s√°ch ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu
VERIFY_HOUR=4	# 4h s√°ng

# C·∫•u h√¨nh Rclone
export RCLONE_TRANSFERS=32
export RCLONE_CHECKERS=32

# C√°c th√¥ng s·ªë c·∫•u h√¨nh kh√°c
MAX_LOG_SIZE=10485760  # 10MB
LOCK_TIMEOUT=3600  # 1 gi·ªù

# L·∫•y th∆∞ m·ª•c c·ªßa script
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# ƒê∆∞·ªùng d·∫´n c·∫•u h√¨nh v√† theo d√µi
VERIFY_LAST_FILE="$SCRIPT_DIR/restic_last_verify"
LOG_FILE="$SCRIPT_DIR/restic_backup.log"
LOCKFILE="$SCRIPT_DIR/restic_backup.lock"

# ƒê·∫£m b·∫£o file log t·ªìn t·∫°i
touch "$LOG_FILE"

# Ki·ªÉm tra quy·ªÅn root
if [ "$(id -u)" != "0" ]; then
    echo "Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn root"
    exit 1
fi

# Gi·∫£m ƒë·ªô ∆∞u ti√™n c·ªßa script
renice -n 19 -p $$ > /dev/null 2>&1
ionice -c 2 -n 7 -p $$ > /dev/null 2>&1

# H√†m ghi log v√† g·ª≠i th√¥ng b√°o
log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Qu·∫£n l√Ω k√≠ch th∆∞·ªõc log
    if [ -f "$LOG_FILE" ] && [ $(stat -c %s "$LOG_FILE") -ge $MAX_LOG_SIZE ]; then
        grep -E '^\[.*\] \[(WARNING|ERROR)\]' "$LOG_FILE" > "$LOG_FILE.tmp"
        mv "$LOG_FILE.tmp" "$LOG_FILE"
        
        if [ $(stat -c %s "$LOG_FILE") -ge $MAX_LOG_SIZE ]; then
            tail -n 100 "$LOG_FILE" > "$LOG_FILE.tmp"
            mv "$LOG_FILE.tmp" "$LOG_FILE"
        fi
    fi
    
    echo -e "[$timestamp] [$level] $message" >> "$LOG_FILE"
    echo -e "[$level] $message"
    
    # Ch·ªâ g·ª≠i Telegram khi c√≥ WARNING ho·∫∑c ERROR
    if [ "$level" = "WARNING" ] || [ "$level" = "ERROR" ]; then
        send_telegram_message "[$level] $message"
    fi
}

# H√†m g·ª≠i th√¥ng b√°o Telegram
send_telegram_message() {
    local message="$1"
    local error_log="$2"
    
    local full_message="$message"
    if [ ! -z "$error_log" ]; then
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        full_message="${full_message}\n\nüïí Th·ªùi gian: ${timestamp}"
        full_message="${full_message}\n\nüìù Chi ti·∫øt:\n<code>${error_log}</code>"
    fi
    
    # Th√™m th√¥ng tin h·ªá th·ªëng cho m·ªçi th√¥ng b√°o
    local hostname=$(hostname)
    local system_info=$(uname -a)
    full_message="${full_message}\n\nüñ• M√°y ch·ªß: ${hostname}\nüíª H·ªá th·ªëng: ${system_info}"
    
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
        -d chat_id="$CHAT_ID" \
        -d "text=${full_message}" \
        -d "parse_mode=HTML" \
        > /dev/null
}

# H√†m ki·ªÉm tra ƒëi·ªÅu ki·ªán c∆° b·∫£n
check_prerequisites() {
    # Ki·ªÉm tra c√°c l·ªánh c·∫ßn thi·∫øt
    for cmd in restic rclone; do
        if ! command -v $cmd &> /dev/null; then
            log_message "ERROR" "Kh√¥ng t√¨m th·∫•y l·ªánh: $cmd"
            return 1
        fi
    done
    
    # Ki·ªÉm tra th∆∞ m·ª•c backup
    local has_error=0
    for path in $BACKUP_DIR; do
        if [ ! -e "$path" ]; then
            log_message "ERROR" "Kh√¥ng t·ªìn t·∫°i ƒë∆∞·ªùng d·∫´n: $path"
            has_error=1
        fi
    done
    
    return $has_error
}

# Th·ª±c hi·ªán backup v·ªõi c∆° ch·∫ø th·ª≠ l·∫°i t·ªëi ƒëa 3 l·∫ßn n·∫øu g·∫∑p l·ªói m·∫°ng
perform_backup_with_retry() {
    local command="$1"
    local operation="$2"
    local retry_count=0
    
    while [ $retry_count -lt 3 ]; do
        # T√πy ch·ªânh th√¥ng b√°o d·ª±a tr√™n lo·∫°i operation
        case "$operation" in
            "Restic Backup")
                log_message "INFO" "ƒêang th·ª±c hi·ªán backup d·ªØ li·ªáu (l·∫ßn $((retry_count + 1))/3)..."
                ;;
            "Restic Verify")
                log_message "INFO" "ƒêang ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu (l·∫ßn $((retry_count + 1))/3)..."
                ;;
            "Restic Forget & Prune")
                log_message "INFO" "ƒêang x√≥a c√°c b·∫£n backup c≈© (l·∫ßn $((retry_count + 1))/3)..."
                ;;
        esac
        
        if error_log=$(eval "$command" 2>&1); then
            # T√πy ch·ªânh th√¥ng b√°o th√†nh c√¥ng
            case "$operation" in
                "Restic Backup")
                    log_message "INFO" "Backup d·ªØ li·ªáu th√†nh c√¥ng"
                    ;;
                "Restic Verify")
                    log_message "INFO" "Ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu th√†nh c√¥ng"
                    ;;
                "Restic Forget & Prune")
                    log_message "INFO" "X√≥a c√°c b·∫£n backup c≈© th√†nh c√¥ng"
                    ;;
            esac
            return 0
        fi
        
        # N·∫øu repository ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi v√† th·ª≠ l·∫°i
        if [[ "$error_log" == *"unable to open config file"* ]] || [[ "$error_log" == *"Is there a repository at the following location?"* ]]; then
            log_message "INFO" "Ch∆∞a c√≥ repository Restic, ƒëang kh·ªüi t·∫°o..."
            if restic init; then
                log_message "INFO" "ƒê√£ kh·ªüi t·∫°o repository Restic, ti·∫øp t·ª•c backup..."
                continue
            else
                log_message "ERROR" "Kh√¥ng th·ªÉ t·∫°o repository"
                return 1
            fi
        fi
        
        # Ch·ªâ retry v·ªõi l·ªói m·∫°ng/t·∫°m th·ªùi
        if echo "$error_log" | grep -qiE "network|timeout|temporary|connection refused"; then
            retry_count=$((retry_count + 1))
            # T√πy ch·ªânh th√¥ng b√°o th·∫•t b·∫°i
            case "$operation" in
                "Restic Backup")
                    log_message "WARNING" "Backup d·ªØ li·ªáu th·∫•t b·∫°i, th·ª≠ l·∫°i sau 5 gi√¢y..."
                    ;;
                "Restic Verify")
                    log_message "WARNING" "Ki·ªÉm tra to√†n v·∫πn th·∫•t b·∫°i, th·ª≠ l·∫°i sau 5 gi√¢y..."
                    ;;
                "Restic Forget & Prune")
                    log_message "WARNING" "D·ªçn d·∫πp backup th·∫•t b·∫°i, th·ª≠ l·∫°i sau 5 gi√¢y..."
                    ;;
            esac
            sleep 5
            continue
        fi
        
        # L·ªói nghi√™m tr·ªçng
        log_message "ERROR" "$operation th·∫•t b·∫°i: $error_log"
        return 1
    done
    
    # T√πy ch·ªânh th√¥ng b√°o th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠
    case "$operation" in
        "Restic Backup")
            log_message "ERROR" "Backup d·ªØ li·ªáu th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠"
            ;;
        "Restic Verify")
            log_message "ERROR" "Ki·ªÉm tra to√†n v·∫πn th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠"
            ;;
        "Restic Forget & Prune")
            log_message "ERROR" "D·ªçn d·∫πp backup th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠"
            ;;
    esac
    return 1
}

# Ki·ªÉm tra xem c√≥ c·∫ßn verify backup kh√¥ng (m·ªói ng√†y v√†o gi·ªù ƒë√£ c·∫•u h√¨nh)
should_run_verify() {
    local current_hour=$(date +%H)
    local current_date=$(date +%Y-%m-%d)
    
    if [ ! -f "$VERIFY_LAST_FILE" ]; then
        date -d "yesterday" +%Y-%m-%d > "$VERIFY_LAST_FILE"
    fi
    
    local last_verify_date=$(cat "$VERIFY_LAST_FILE")
    
    if [ "$current_date" != "$last_verify_date" ] && [ "$current_hour" -ge "$VERIFY_HOUR" ]; then
        return 0
    fi
    
    return 1
}

# H√†m c·∫≠p nh·∫≠t th·ªùi gian verify
update_verify_time() {
    date +%Y-%m-%d > "$VERIFY_LAST_FILE"
    log_message "INFO" "ƒê√£ c·∫≠p nh·∫≠t l·∫°i th·ªùi gian ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu l·∫ßn ti·∫øp theo"
}

# H√†m sao ch√©p repository Restic sang c√°c cloud d·ª± ph√≤ng
perform_secondary_backup() {
    if [ -z "$SECONDARY_REMOTE" ]; then
    #    log_message "INFO" "Kh√¥ng c√≥ c·∫•u h√¨nh cloud d·ª± ph√≤ng, b·ªè qua b∆∞·ªõc sao ch√©p"
        return 0
    fi

    local source_path=${RESTIC_REPOSITORY#rclone:}
	log_message "INFO" "B·∫Øt ƒë·∫ßu sao ch√©p repository sang cloud d·ª± ph√≤ng"
    # T√°ch danh s√°ch cloud d·ª± ph√≤ng
    IFS=' ' read -r -a remotes <<< "$SECONDARY_REMOTE"

    for remote in "${remotes[@]}"; do
        log_message "INFO" "ƒêang sao ch√©p repository sang cloud d·ª± ph√≤ng: $remote"

        error_log=$(rclone sync "$source_path" "$remote" \
            --transfers $RCLONE_TRANSFERS \
            --checkers $RCLONE_CHECKERS \
            2>&1)

        if [ $? -ne 0 ]; then
            log_message "ERROR" "L·ªói sao ch√©p repository sang cloud d·ª± ph√≤ng: $remote: $error_log"
            return 1
        fi

        log_message "INFO" "ƒê√£ sao ch√©p xong repository sang cloud d·ª± ph√≤ng: $remote"
    done

    return 0
}

# H√†m ch√≠nh
main() {
    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán c∆° b·∫£n
    check_prerequisites || exit 1

    # Ki·ªÉm tra v√† t·∫°o lock
    exec 200>"$LOCKFILE"
    if ! flock -n 200; then
        log_message "INFO" "M·ªôt ti·∫øn tr√¨nh backup kh√°c ƒëang ch·∫°y, tho√°t..."
        exit 1
    fi
	
	# Ghi PID v√† ƒë·∫£m b·∫£o x√≥a lock khi k·∫øt th√∫c
    echo $$ > "$LOCKFILE"
    trap 'rm -f "$LOCKFILE"; log_message "INFO" "‚ú® Ho√†n t·∫•t quy tr√¨nh backup."; exit' EXIT SIGINT SIGTERM
	
	log_message "INFO" "üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh backup..."
	
    # Backup ch√≠nh
    perform_backup_with_retry "restic backup $BACKUP_DIR" "Restic Backup" || exit 1

    # Th·ª±c hi·ªán forget v√† prune
	log_message "INFO" "B·∫Øt ƒë·∫ßu x√≥a c√°c b·∫£n backup c≈© theo ch√≠nh s√°ch..."
    perform_backup_with_retry "restic forget --prune --keep-hourly $KEEP_HOURLY --keep-daily $KEEP_DAILY --keep-monthly $KEEP_MONTHLY" "Restic Forget & Prune" || exit 1

    # Ki·ªÉm tra to√†n v·∫πn backup (n·∫øu c·∫ßn)
    if should_run_verify; then
		log_message "INFO" "B·∫Øt ƒë·∫ßu ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu backup..."
        perform_backup_with_retry "restic check --read-data" "Restic Verify" || exit 1
        update_verify_time
    fi
	
	# Sao ch√©p sang cloud d·ª± ph√≤ng
    perform_secondary_backup || exit 1
}

# Ch·∫°y script
main
