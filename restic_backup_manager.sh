#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# C·∫•u h√¨nh Telegram
BOT_API_KEY="xxxxx:xxxxxxxxxxxxxxxxxxxx"
CHAT_ID="xxxxxxx"

# C·∫•u h√¨nh Restic Primary Backup
# N√™n d√πng cloud object storage d·∫°ng Amazon S3, Cloudflare R2
export RESTIC_REPOSITORY="rclone:cloudflare-free:bibica-net"
export RESTIC_PASSWORD="your-secure-password"	# ƒë·ªïi th√†nh 1 password t√πy th√≠ch

# Th∆∞ m·ª•c v√† file c·∫ßn sao l∆∞u
# M·ªói th∆∞ m·ª•c ho·∫∑c file c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng
BACKUP_DIR="/home /var/spool/cron/crontabs/root"

# Ch√≠nh s√°ch gi·ªØ backup
# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh t·ªëi ƒëa gi·ªØ l·∫°i 67 b·∫£n
KEEP_HOURLY=24	# gi·ªØ l·∫°i¬†24 b·∫£n snapshot (1 b·∫£n m·ªói gi·ªù trong 24 gi·ªù g·∫ßn nh·∫•t)
KEEP_DAILY=31	# gi·ªØ l·∫°i¬†31 b·∫£n snapshot (1 b·∫£n m·ªói ng√†y trong 31 ng√†y g·∫ßn nh·∫•t)
KEEP_MONTHLY=12	# gi·ªØ l·∫°i 12 b·∫£n snapshot¬†(1 b·∫£n m·ªói th√°ng trong 12 th√°ng g·∫ßn nh·∫•t)

# Ch√≠nh s√°ch ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu
# Mu·ªën ch·∫°y ki·ªÉm tra l√∫c 3h chi·ªÅu th√¨ s·ª≠a VERIFY_HOUR=15
VERIFY_HOUR=4	# M·∫∑c ƒë·ªãnh l√∫c 4h s√°ng m·ªói ng√†y

# C·∫•u h√¨nh Secondary Backup 
# M·∫∑c ƒë·ªãnh ƒë·ªÉ tr·ªëng: kh√¥ng d√πng cloud d·ª± ph√≤ng
# C√°c cloud th√™m v√†o theo c√∫ ph√°p c·ªßa rclone, c√°c cloud c√°ch nhau b·ªüi kho·∫£ng tr·∫Øng
# V√≠ d·ª•: SECONDARY_REMOTE="cloudflare-free:bibica-net cloudflare-r2:bibica-net google-drive-api:bibica-net"
SECONDARY_REMOTE=""

# C·∫•u h√¨nh Rclone
export RCLONE_TRANSFERS=32
export RCLONE_CHECKERS=32

# Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n
full_path=$(readlink -f "$0")
[ -z "$full_path" ] && { echo "[L·ªói] Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n script"; exit 1; }
SCRIPT_DIR=$(dirname "$full_path")
VERIFY_LAST_FILE="$SCRIPT_DIR/restic_last_verify"
LOCKFILE="$SCRIPT_DIR/restic_backup.lock"
LOG_FILE="$SCRIPT_DIR/backup.log"
touch "$LOG_FILE"

log() { 
    local message="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" >> "$LOG_FILE"
    if [ $(wc -c < "$LOG_FILE") -gt 1048576 ]; then
        grep "\[L·ªói\]" "$LOG_FILE" | tail -n 10 > "$LOG_FILE.tmp"
        mv "$LOG_FILE.tmp" "$LOG_FILE"
    fi
}

notify_error() {
    log "[L·ªói] $1 - Chi ti·∫øt: $2"
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" -d "chat_id=$CHAT_ID" -d "parse_mode=HTML" \
         -d "text=$(printf "‚ùå [L·ªói] %s\nüîç Chi ti·∫øt:\n<code>%s</code>\nüñ•Ô∏è Th√¥ng tin h·ªá th·ªëng:\n- M√°y ch·ªß: %s\n- H·ªá ƒëi·ªÅu h√†nh: %s" "$1" "$2" "$(hostname)" "$(uname -a)")" \
         || log "[L·ªói] Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn Telegram"
}

# Export c√°c h√†m v√† bi·∫øn cho xargs
export -f log notify_error
export BOT_API_KEY CHAT_ID LOG_FILE

# Ki·ªÉm tra y√™u c·∫ßu
for cmd in restic rclone xargs; do command -v $cmd >/dev/null || { notify_error "Kh√¥ng t√¨m th·∫•y l·ªánh $cmd" "$cmd"; exit 1; }; done
for path in $BACKUP_DIR; do [ -e "$path" ] || { notify_error "ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i" "$path"; exit 1; }; done

# Thi·∫øt l·∫≠p kh√≥a v√† t·ªëi ∆∞u ti·∫øn tr√¨nh
exec 200>"$LOCKFILE" && flock -n 200 || { notify_error "M·ªôt ti·∫øn tr√¨nh backup kh√°c ƒëang ch·∫°y" "$LOCKFILE"; exit 1; }
trap 'exec 200>&-; rm -f "$LOCKFILE"' EXIT
renice -n 19 -p $$ >/dev/null 2>&1 && ionice -c 2 -n 7 -p $$ >/dev/null 2>&1

# Backup ch√≠nh
source_path=${RESTIC_REPOSITORY#rclone:}
log "B·∫Øt ƒë·∫ßu backup - $source_path"
if ! error_output=$(restic backup $BACKUP_DIR 2>&1); then
    if echo "$error_output" | grep -q "unable to open config file"; then
        log "Repository ch∆∞a t·ªìn t·∫°i, ƒëang kh·ªüi t·∫°o..."
        if ! init_output=$(restic init 2>&1); then
            notify_error "Kh√¥ng th·ªÉ kh·ªüi t·∫°o repository" "$init_output"; exit 1
        fi
        log "Kh·ªüi t·∫°o repository th√†nh c√¥ng, th·ª±c hi·ªán l·∫°i backup..."
        if ! error_output=$(restic backup $BACKUP_DIR 2>&1); then
            notify_error "Backup th·∫•t b·∫°i sau khi kh·ªüi t·∫°o" "$error_output"; exit 1
        fi
    else 
        notify_error "Backup th·∫•t b·∫°i" "$error_output"; exit 1
    fi
fi
log "Backup th√†nh c√¥ng"

# D·ªçn d·∫πp v√† ki·ªÉm tra
log "B·∫Øt ƒë·∫ßu d·ªçn d·∫πp backup c≈©"
if ! error_output=$(restic forget --prune --keep-hourly $KEEP_HOURLY --keep-daily $KEEP_DAILY --keep-monthly $KEEP_MONTHLY 2>&1); then
    notify_error "Kh√¥ng th·ªÉ d·ªçn d·∫πp backup c≈©" "$error_output"
else
    log "D·ªçn d·∫πp backup c≈© th√†nh c√¥ng"
fi

if [ ! -f "$VERIFY_LAST_FILE" ] || [ $(date +%Y-%m-%d) != $(cat "$VERIFY_LAST_FILE") ] && [ $(date +%H) -ge "$VERIFY_HOUR" ]; then
    log "B·∫Øt ƒë·∫ßu ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu"
    if ! error_output=$(restic check --read-data 2>&1); then
        notify_error "Ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu th·∫•t b·∫°i" "$error_output"
    else
        date +%Y-%m-%d > "$VERIFY_LAST_FILE"
        log "Ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu th√†nh c√¥ng"
    fi
fi

# Sao l∆∞u d·ª± ph√≤ng
[ -n "$SECONDARY_REMOTE" ] && {
    log "B·∫Øt ƒë·∫ßu sao l∆∞u d·ª± ph√≤ng"
    do_backup() {
        local target="$1"
        if ! error_output=$(rclone sync "$2" "$target" 2>&1); then
            log "[L·ªói] Sao l∆∞u d·ª± ph√≤ng th·∫•t b·∫°i - $target"
            notify_error "Sao l∆∞u d·ª± ph√≤ng th·∫•t b·∫°i - $target" "$error_output"
            return 1
        fi
        log "Sao l∆∞u d·ª± ph√≤ng th√†nh c√¥ng - $target"
        return 0
    }
    export -f do_backup
    
    if [ $(echo "$SECONDARY_REMOTE" | wc -w) -eq 1 ]; then
        log "C√≥ 1 remote ƒë∆∞·ª£c c·∫•u h√¨nh"
        do_backup "$SECONDARY_REMOTE" "$source_path"
    else
        log "C√≥ nhi·ªÅu remote ƒë∆∞·ª£c c·∫•u h√¨nh, ch·∫°y song song"
        echo "$SECONDARY_REMOTE" | tr ' ' '\n' | xargs -P 4 -I {} bash -c "do_backup '{}' '$source_path'" && \
            log "Ho√†n th√†nh t·∫•t c·∫£ sao l∆∞u d·ª± ph√≤ng" || log "[L·ªói] C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh sao l∆∞u d·ª± ph√≤ng song song"
    fi
}

log "Ho√†n t·∫•t quy tr√¨nh backup"
