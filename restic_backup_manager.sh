#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# ==================== C·∫§U H√åNH ====================
# C·∫•u h√¨nh Telegram
BOT_API_KEY="xxxxxxxxxxx:xxxxxxxxxxxxxxxxxxxx"
CHAT_ID="xxxxxxxxxxxxxx"

# C·∫•u h√¨nh Restic Primary Backup
export RESTIC_REPOSITORY="rclone:cloudflare-free:bibica-net"
export RESTIC_PASSWORD="your-secure-password"

# Th∆∞ m·ª•c v√† file c·∫ßn sao l∆∞u
BACKUP_DIR="/home /var/spool/cron/crontabs/root /root/.config/rclone"

# Ch√≠nh s√°ch gi·ªØ backup
KEEP_HOURLY=24
KEEP_DAILY=31
KEEP_MONTHLY=12

# Ch√≠nh s√°ch ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu
VERIFY_HOUR=4

# C·∫•u h√¨nh Secondary Backup
SECONDARY_REMOTE=""

# C·∫•u h√¨nh Rclone
export RCLONE_TRANSFERS=32
export RCLONE_CHECKERS=32

# Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
LOG_DIR="$SCRIPT_DIR/logs"
VERIFY_LAST_FILE="$LOG_DIR/restic_last_verify"
LOCKFILE="$LOG_DIR/restic_backup.lock"
LOG_FILE="$LOG_DIR/backup.log"

# T·∫°o th∆∞ m·ª•c log n·∫øu ch∆∞a t·ªìn t·∫°i
mkdir -p "$LOG_DIR"
touch "$LOG_FILE"

# ==================== H√ÄM PH·ª§ TR·ª¢ ====================
# H√†m ghi log
log() {
   local message="$1"
   local timestamp="[$(date '+%Y-%m-%d %H:%M:%S')]"
   echo "$timestamp $message" >> "$LOG_FILE"
   if [ -t 1 ]; then
      echo "$timestamp $message"
   fi
   if [ $(wc -c < "$LOG_FILE") -gt 1048576 ]; then
       grep "\[L·ªói\]" "$LOG_FILE" | tail -n 10 > "$LOG_FILE.tmp"
       mv "$LOG_FILE.tmp" "$LOG_FILE"
   fi
}

# H√†m th√¥ng b√°o l·ªói qua Telegram
notify_error() {
    local error_message="$1"
    local error_detail="$2"
    log "[L·ªói] $error_message - Chi ti·∫øt: $error_detail"
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" -d "chat_id=$CHAT_ID" -d "parse_mode=HTML" \
         -d "text=$(printf "‚ùå [L·ªói] %s\nüîç Chi ti·∫øt:\n<code>%s</code>\nüñ•Ô∏è Th√¥ng tin h·ªá th·ªëng:\n- M√°y ch·ªß: %s\n- H·ªá ƒëi·ªÅu h√†nh: %s" "$error_message" "$error_detail" "$(hostname)" "$(uname -a)")" \
         >/dev/null 2>&1 || log "[L·ªói] Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn Telegram"
}

# Export c√°c h√†m v√† bi·∫øn cho xargs
export -f log notify_error
export BOT_API_KEY CHAT_ID LOG_FILE

# ==================== KI·ªÇM TRA Y√äU C·∫¶U ====================
check_requirements() {
    for cmd in restic rclone xargs curl; do
        command -v $cmd >/dev/null || { notify_error "Kh√¥ng t√¨m th·∫•y l·ªánh $cmd" "$cmd"; exit 1; }
    done
    for path in $BACKUP_DIR; do
        [ -e "$path" ] || { notify_error "ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i" "$path"; exit 1; }
    done
}

# ==================== THI·∫æT L·∫¨P KH√ìA V√Ä T·ªêI ∆ØU TI·∫æN TR√åNH ====================
setup_lock() {
    exec 200>"$LOCKFILE" && flock -n 200 || { log "[L·ªói] M·ªôt ti·∫øn tr√¨nh Restic Multi-Cloud Backup Manager kh√°c ƒëang ch·∫°y"; exit 1; }
    trap 'exec 200>&-; rm -f "$LOCKFILE"' EXIT
    renice -n 19 -p $$ >/dev/null 2>&1 && ionice -c 2 -n 7 -p $$ >/dev/null 2>&1
}

# ==================== KI·ªÇM TRA CRON JOB ====================
check_cron_job() {
    local script_name=$(basename "$0")
    local script_path=$(realpath "$0")
    if ! crontab -l | grep -v '^#' | grep -q "$script_name"; then
        echo -e "\n* Restic Multi-Cloud Backup Manager ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ ch·∫°y qua cron."
        echo -e "* B·∫°n c√≥ th·ªÉ ch·∫°y l·ªánh b√™n d∆∞·ªõi ƒë·ªÉ th√™m n√≥ v√†o cron:\n"
        echo -e "\033[1;32m(crontab -l 2>/dev/null; echo \"0 * * * * $script_path\") | crontab -\033[0m\n"
    fi
}

# ==================== THI·∫æT L·∫¨P ALIAS ====================
setup_alias() {
    local shell_rc_file
    local alias_restore="alias restore='$0 restore'"
    local alias_backup="alias backup='$0'"

    if [[ "$SHELL" == *"zsh"* ]]; then
        shell_rc_file="$HOME/.zshrc"
    else
        shell_rc_file="$HOME/.bashrc"
    fi

    if grep -q "alias restore=" "$shell_rc_file"; then
        current_alias_restore=$(grep "alias restore=" "$shell_rc_file" | cut -d "'" -f 2 | cut -d " " -f 1)
        if [[ "$current_alias_restore" != "$0" ]]; then
            sed -i.bak "s|alias restore=.*|alias restore='$0 restore'|" "$shell_rc_file"
            echo "ƒê√£ c·∫≠p nh·∫≠t alias 'restore' ƒë·ªÉ tr·ªè ƒë·∫øn file script m·ªõi: $0."
        else
            echo "Alias 'restore' ƒë√£ t·ªìn t·∫°i v√† tr·ªè ƒë·∫øn file script hi·ªán t·∫°i: $0."
        fi
    else
        echo "$alias_restore" >> "$shell_rc_file"
        echo "ƒê√£ th√™m alias 'restore' v√†o $shell_rc_file."
    fi

    if grep -q "alias backup=" "$shell_rc_file"; then
        current_alias_backup=$(grep "alias backup=" "$shell_rc_file" | cut -d "'" -f 2)
        if [[ "$current_alias_backup" != "$0" ]]; then
            sed -i.bak "s|alias backup=.*|alias backup='$0'|" "$shell_rc_file"
            echo "ƒê√£ c·∫≠p nh·∫≠t alias 'backup' ƒë·ªÉ tr·ªè ƒë·∫øn file script m·ªõi: $0."
        else
            echo "Alias 'backup' ƒë√£ t·ªìn t·∫°i v√† tr·ªè ƒë·∫øn file script hi·ªán t·∫°i: $0."
        fi
    else
        echo "$alias_backup" >> "$shell_rc_file"
        echo "ƒê√£ th√™m alias 'backup' v√†o $shell_rc_file."
    fi

    echo "ƒê·ªÉ √°p d·ª•ng thay ƒë·ªïi, ch·∫°y l·ªánh: source $shell_rc_file"
}

# ==================== PH·ª§C H·ªíI D·ªÆ LI·ªÜU ====================
restore_menu() {
    local PRIMARY_REPO="$RESTIC_REPOSITORY"
    local SECONDARY_REPOS=($SECONDARY_REMOTE)
    local PRIMARY_REPO_DISPLAY="${PRIMARY_REPO#rclone:}"

    echo
    echo "=== CH·ªåN KHO L∆ØU TR·ªÆ ƒê·ªÇ PH·ª§C H·ªíI ==="
    echo "1) Sao l∆∞u ch√≠nh - $PRIMARY_REPO_DISPLAY"
    
    for ((i=0; i<${#SECONDARY_REPOS[@]}; i++)); do
        echo "$((i+2))) Sao l∆∞u d·ª± ph√≤ng - ${SECONDARY_REPOS[$i]#rclone:}"
    done

    echo "0) Tho√°t"
    echo

    while true; do
        read -p "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: " choice

        case $choice in
            1)
                if [[ ! "$PRIMARY_REPO" =~ ^rclone: ]]; then
                    local selected_repo="rclone:$PRIMARY_REPO"
                else
                    local selected_repo="$PRIMARY_REPO"
                fi
                break
                ;;
            0)
                echo "Tho√°t Restic Multi-Cloud Backup Manager."
                echo
                exit 0
                ;;
            *)
                if [[ $choice -ge 2 ]]; then
                    local index=$((choice - 2))
                    if [ $index -ge 0 ] && [ $index -lt ${#SECONDARY_REPOS[@]} ]; then
                        if [[ ! "${SECONDARY_REPOS[$index]}" =~ ^rclone: ]]; then
                            local selected_repo="rclone:${SECONDARY_REPOS[$index]}"
                        else
                            local selected_repo="${SECONDARY_REPOS[$index]}"
                        fi
                        break
                    fi
                fi
                echo -e "\e[31m‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.\e[0m"
                ;;
        esac
    done

    # Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn kho l∆∞u tr·ªØ v√† l·∫•y danh s√°ch snapshots
    local snapshots_result
    if ! snapshots_result=$(restic snapshots -r "$selected_repo" 2>&1); then
        echo -e "\e[31m‚ùå L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn kho l∆∞u tr·ªØ $selected_repo.\e[0m"
        echo "$snapshots_result"
        echo "Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh ho·∫∑c ch·ªçn kho l∆∞u tr·ªØ kh√°c."
        echo
        restore_menu
        return
    fi

    echo
    echo "ƒê√£ ch·ªçn kho l∆∞u tr·ªØ: $selected_repo"
    echo "=== DANH S√ÅCH C√ÅC B·∫¢N SAO L∆ØU ==="
    echo "$snapshots_result"
    echo

    while true; do
        read -p "üìã Nh·∫≠p ID b·∫£n sao l∆∞u ƒë·ªÉ ph·ª•c h·ªìi (ho·∫∑c 'back' ƒë·ªÉ quay l·∫°i): " snapshot_id

        if [ "$snapshot_id" == "back" ]; then
            restore_menu
            return
        fi

        # Ki·ªÉm tra xem snapshot_id c√≥ t·ªìn t·∫°i trong k·∫øt qu·∫£ snapshots hay kh√¥ng
        if ! echo "$snapshots_result" | grep -q -w "$snapshot_id"; then
            echo -e "\e[31m‚ùå ID kh√¥ng t·ªìn t·∫°i trong kho l∆∞u tr·ªØ.\e[0m"
            echo
            continue
        fi

        break
    done

    while true; do
        echo
        echo "=== T√ôY CH·ªåN PH·ª§C H·ªíI ==="
        echo "1) Ph·ª•c h·ªìi to√†n b·ªô b·∫£n sao l∆∞u"
        echo "2) Ph·ª•c h·ªìi m·ªôt ph·∫ßn (th∆∞ m·ª•c/t·∫≠p tin c·ª• th·ªÉ)"
        echo "0) Quay l·∫°i"
        read -p "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: " restore_choice

        case $restore_choice in
            1|2)
                local restore_path=""
                local restore_item=""

                # Nh·∫≠p ƒë∆∞·ªùng d·∫´n ph·ª•c h·ªìi
                while true; do
                    echo "üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o)."
                    echo "   V√≠ d·ª•: /home/user (d·ªØ li·ªáu tr√™n cloud storage s·∫Ω gi·∫£i n√©n v√†o /home/user): "
                    echo "   V√≠ d·ª•: / (d·ªØ li·ªáu tr√™n cloud storage s·∫Ω t·ª± ƒë·ªông gi·∫£i n√©n v√†o ƒë∆∞·ªùng d·∫´n nh∆∞ ban ƒë·∫ßu): "
                    read -p "> " restore_path
                    if [ -z "$restore_path" ]; then
                        restore_path="/"
                    fi

                    if [[ ! "$restore_path" =~ ^/ ]]; then
                        echo -e "\e[31m‚ùå ƒê∆∞·ªùng d·∫´n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / V√≠ d·ª•: /home/user\e[0m"
                        echo
                        continue
                    fi
                    break
                done

                # Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin n·∫øu ph·ª•c h·ªìi m·ªôt ph·∫ßn
                if [ "$restore_choice" == "2" ]; then
                    while true; do
                        echo "üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin trong b·∫£n sao l∆∞u mu·ªën ph·ª•c h·ªìi."
                        echo "   V√≠ d·ª•: /home/backup (ph·ª•c h·ªìi th∆∞ m·ª•c /home/backup t·ª´ b·∫£n sao l∆∞u): "
                        read -p "> " restore_item

                        if [[ ! "$restore_item" =~ ^/ ]]; then
                            echo -e "\e[31m‚ùå ƒê∆∞·ªùng d·∫´n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / V√≠ d·ª•: /home/backup\e[0m"
                            echo
                            continue
                        fi
                        break
                    done
                fi

                # X√°c nh·∫≠n ph·ª•c h·ªìi
                while true; do
                    echo
                    echo "=== X√ÅC NH·∫¨N PH·ª§C H·ªíI ==="
                    echo -e "üì¶ Kho l∆∞u tr·ªØ: \e[32m$selected_repo\e[0m"
                    echo -e "üìã ID b·∫£n sao l∆∞u: \e[34m$snapshot_id\e[0m"
                    echo -e "üìÇ ƒê∆∞·ªùng d·∫´n ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o): \e[33m$restore_path\e[0m"
                    [ "$restore_choice" == "2" ] && echo -e "üìÇ ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin trong b·∫£n sao l∆∞u mu·ªën ph·ª•c h·ªìi: \e[31m$restore_item\e[0m"
                    echo
                    echo "1) Th·ª±c hi·ªán ph·ª•c h·ªìi"
                    echo "2) S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o)"
                    [ "$restore_choice" == "2" ] && echo "3) S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin trong b·∫£n sao l∆∞u mu·ªën ph·ª•c h·ªìi"
                    echo "0) Tr·ªü v·ªÅ menu ch√≠nh"
                    echo
                    read -p "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: " confirm_choice

                    case $confirm_choice in
                        1)
                            if [ "$restore_choice" == "1" ]; then
                                restic restore -r "$selected_repo" "$snapshot_id" --target "$restore_path"
                            else
                                restic restore -r "$selected_repo" "$snapshot_id" --target "$restore_path" --include "$restore_item"
                            fi
                            return
                            ;;
                        2)
                            while true; do
                                echo "üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ph·ª•c h·ªìi (n∆°i d·ªØ li·ªáu gi·∫£i n√©n v√†o) m·ªõi:"
                                read -p "> " restore_path
                                if [ -z "$restore_path" ]; then
                                    restore_path="/"
                                fi
                                if [[ ! "$restore_path" =~ ^/ ]]; then
                                    echo -e "\e[31m‚ùå ƒê∆∞·ªùng d·∫´n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / V√≠ d·ª•: /home/user\e[0m"
                                else
                                    break
                                fi
                            done
                            continue
                            ;;
                        3)
                            if [ "$restore_choice" == "2" ]; then
                                while true; do
                                    echo "üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c/t·∫≠p tin trong b·∫£n sao l∆∞u mu·ªën ph·ª•c h·ªìi m·ªõi (v√≠ d·ª•: /home/backup):"
                                    read -p "> " restore_item
                                    if [[ ! "$restore_item" =~ ^/ ]]; then
                                        echo -e "\e[31m‚ùå ƒê∆∞·ªùng d·∫´n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng / V√≠ d·ª•: /home/backup\e[0m"
                                    else
                                        break
                                    fi
                                done
                                continue
                            else
                                echo -e "\e[31m‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.\e[0m"
                            fi
                            ;;
                        0)
                            restore_menu
                            return
                            ;;
                        *)
                            echo -e "\e[31m‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.\e[0m"
                            echo
                            ;;
                    esac
                done
                ;;
            0)
                restore_menu
                return
                ;;
            *)
                echo -e "\e[31m‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.\e[0m"
                ;;
        esac
    done
}

# ==================== TH·ª∞C HI·ªÜN BACKUP ====================
perform_backup() {
    local source_path=${RESTIC_REPOSITORY#rclone:}
    log "B·∫Øt ƒë·∫ßu backup - $source_path"
    if ! error_output=$(restic backup $BACKUP_DIR 2>&1); then
        if echo "$error_output" | grep -q "unable to open config file"; then
            log "Repository ch∆∞a t·ªìn t·∫°i, ƒëang kh·ªüi t·∫°o..."
            if ! init_output=$(restic init 2>&1); then
                notify_error "Kh√¥ng th·ªÉ kh·ªüi t·∫°o repository" "$init_output"; exit 1
            fi
            log "Kh·ªüi t·∫°o repository th√†nh c√¥ng, th·ª±c hi·ªán l·∫°i backup..."
            if ! error_output=$(restic backup $BACKUP_DIR 2>&1); then
                notify_error "Backup th·∫•t b·∫°i sau khi kh·ªüi t·∫°o" "$error_output"; exit 1
            fi
        else 
            notify_error "Backup th·∫•t b·∫°i" "$error_output"; exit 1
        fi
    fi
    log "Backup th√†nh c√¥ng"

	log "B·∫Øt ƒë·∫ßu d·ªçn d·∫πp backup c≈©"
	if ! error_output=$(restic forget --prune --keep-hourly $KEEP_HOURLY --keep-daily $KEEP_DAILY --keep-monthly $KEEP_MONTHLY 2>&1); then
		notify_error "Kh√¥ng th·ªÉ d·ªçn d·∫πp backup c≈©" "$error_output"
		exit 1
	else
		log "D·ªçn d·∫πp backup c≈© th√†nh c√¥ng"
	fi

	if [ ! -f "$VERIFY_LAST_FILE" ] || [ $(date +%Y-%m-%d) != $(cat "$VERIFY_LAST_FILE") ] && [ $(date +%H) -ge "$VERIFY_HOUR" ]; then
		log "B·∫Øt ƒë·∫ßu ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu"
		if ! error_output=$(restic check --read-data 2>&1); then
			notify_error "Ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu th·∫•t b·∫°i" "$error_output"
			exit 1
		else
			date +%Y-%m-%d > "$VERIFY_LAST_FILE"
			log "Ki·ªÉm tra to√†n v·∫πn d·ªØ li·ªáu th√†nh c√¥ng"
		fi
	fi

	[ -n "$SECONDARY_REMOTE" ] && {
		log "B·∫Øt ƒë·∫ßu sao l∆∞u d·ª± ph√≤ng"
		do_backup() {
			local target="$1"
			if ! error_output=$(rclone sync "$2" "$target" 2>&1); then
				notify_error "Sao l∆∞u d·ª± ph√≤ng th·∫•t b·∫°i - $target" "$error_output"
				exit 1
			fi
			log "Sao l∆∞u d·ª± ph√≤ng th√†nh c√¥ng - $target"
		}
		export -f do_backup

		if [ $(echo "$SECONDARY_REMOTE" | wc -w) -eq 1 ]; then
			log "C√≥ 1 remote ƒë∆∞·ª£c c·∫•u h√¨nh"
			do_backup "$SECONDARY_REMOTE" "$source_path"
		else
			log "C√≥ nhi·ªÅu remote ƒë∆∞·ª£c c·∫•u h√¨nh, ch·∫°y song song"
			echo "$SECONDARY_REMOTE" | tr ' ' '\n' | xargs -P 4 -I {} bash -c "do_backup '{}' '$source_path'" && \
				log "Ho√†n th√†nh t·∫•t c·∫£ sao l∆∞u d·ª± ph√≤ng" || { 
					notify_error "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh sao l∆∞u d·ª± ph√≤ng song song" "$error_output"
					exit 1
				}
		fi
	}
    log "Ho√†n t·∫•t quy tr√¨nh backup"
}

# ==================== X·ª¨ L√ù THAM S·ªê ƒê·∫¶U V√ÄO ====================
if [ "$1" == "install" ]; then
	setup_lock
    setup_alias
    exit 0
elif [ "$1" == "restore" ]; then
	setup_lock
	check_cron_job
    restore_menu
    exit 0
fi

# ==================== TH·ª∞C THI CH√çNH ====================
check_requirements
setup_lock
check_cron_job
perform_backup
